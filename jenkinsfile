pipeline {
    agent any

    environment {
        SONARQUBE_SERVER = 'SonarQube'
        SONARQUBE_URL = 'http://18.206.226.14:9000'
        NEXUS_URL = 'http://3.91.5.74:8081'
        NEXUS_CREDENTIALS_ID = 'nexus-creds'
        SLACK_CHANNEL = '#team'
        SLACK_CREDENTIALS_ID = 'slack-token'
        TOMCAT_URL = 'http://3.88.144.100:8080/manager/text'
        TOMCAT_CREDENTIALS_ID = 'tomcat-creds'
        MAVEN_SETTINGS_FILE_ID = 'my-maven-settings'
    }

    stages {

        stage('Git Clone') {
            steps {
                git url: 'https://github.com/manikiran7/jenkins.git', branch: 'main'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def mvnHome = tool 'MVN_HOME'
                    withSonarQubeEnv("${SONARQUBE_SERVER}") {
                        configFileProvider([configFile(fileId: "${MAVEN_SETTINGS_FILE_ID}", variable: 'MAVEN_SETTINGS')]) {
                            sh "${mvnHome}/bin/mvn -s $MAVEN_SETTINGS clean verify sonar:sonar"
                        }
                    }
                }
            }
        }

        stage('Compile & Test') {
            steps {
                script {
                    def mvnHome = tool 'MVN_HOME'
                    configFileProvider([configFile(fileId: "${MAVEN_SETTINGS_FILE_ID}", variable: 'MAVEN_SETTINGS')]) {
                        sh "${mvnHome}/bin/mvn -s $MAVEN_SETTINGS clean test"
                    }
                }
            }
        }

        stage('Package WAR') {
            steps {
                script {
                    def mvnHome = tool 'MVN_HOME'
                    configFileProvider([configFile(fileId: "${MAVEN_SETTINGS_FILE_ID}", variable: 'MAVEN_SETTINGS')]) {
                        sh "${mvnHome}/bin/mvn -s $MAVEN_SETTINGS package"
                    }
                }
            }
        }

        stage('Archive WAR') {
            steps {
                archiveArtifacts artifacts: 'target/*.war', fingerprint: true
            }
        }

        stage('Upload to Nexus') {
            steps {
                script {
                    def mvnHome = tool 'MVN_HOME'
                    withCredentials([usernamePassword(
                        credentialsId: "${NEXUS_CREDENTIALS_ID}",
                        usernameVariable: 'NEXUS_USER',
                        passwordVariable: 'NEXUS_PASS'
                    )]) {
                        configFileProvider([configFile(fileId: "${MAVEN_SETTINGS_FILE_ID}", variable: 'MAVEN_SETTINGS')]) {
                            sh """
                                ${mvnHome}/bin/mvn -s $MAVEN_SETTINGS deploy \
                                -Dnexus.username=$NEXUS_USER \
                                -Dnexus.password=$NEXUS_PASS
                            """
                        }
                    }
                }
            }
        }

        stage('Approval') {
            steps {
                input message: 'Approve deployment to Tomcat?', ok: 'Deploy'
            }
        }

        stage('Deploy to Tomcat') {
            steps {
                script {
                    def warFile = sh(script: "ls target/*.war | head -n 1", returnStdout: true).trim()

                    if (fileExists(warFile)) {
                        def appName = warFile.replaceAll("^target/|\\.war\$", "")
                        withCredentials([usernamePassword(
                            credentialsId: "${TOMCAT_CREDENTIALS_ID}",
                            usernameVariable: 'TOMCAT_USER',
                            passwordVariable: 'TOMCAT_PASS'
                        )]) {
                            sh """
                                curl -u $TOMCAT_USER:$TOMCAT_PASS -T ${warFile} \
                                "${TOMCAT_URL}/deploy?path=/${appName}&update=true"
                            """
                        }
                    } else {
                        error "WAR file not found in target/. Deployment aborted."
                    }
                }
            }
        }

        stage('Notify Success') {
            steps {
                withCredentials([string(credentialsId: "${SLACK_CREDENTIALS_ID}", variable: 'SLACK_TOKEN')]) {
                    slackSend(
                        token: SLACK_TOKEN,
                        channel: "${SLACK_CHANNEL}",
                        color: 'good',
                        message: ":white_check_mark: *Build & Deploy Successful:* `${env.JOB_NAME}` Build #${env.BUILD_NUMBER}"
                    )
                }
            }
        }
    }

    post {
        failure {
            withCredentials([string(credentialsId: "${SLACK_CREDENTIALS_ID}", variable: 'SLACK_TOKEN')]) {
                slackSend(
                    token: SLACK_TOKEN,
                    channel: "${SLACK_CHANNEL}",
                    color: 'danger',
                    message: ":x: *Build Failed:* `${env.JOB_NAME}` Build #${env.BUILD_NUMBER}"
                )
            }
        }

        always {
            echo "Pipeline execution completed."
        }
    }
}
