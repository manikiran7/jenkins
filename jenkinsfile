pipeline {
    agent any

    environment {
        SONARQUBE_SERVER = 'SonarQube'
        SONARQUBE_URL = 'http://3.86.93.46:9000'
        NEXUS_URL = 'http://54.242.72.14:8081' // Updated Nexus IP
        NEXUS_CREDENTIALS_ID = 'nexus-creds'
        SLACK_CHANNEL = '#team'
        SLACK_CREDENTIALS_ID = 'slack-token'
        TOMCAT_URL = 'http://3.86.140.185:8080/manager/text' // Use /manager/text for Tomcat deploy API
        TOMCAT_CREDENTIALS_ID = 'tomcat-creds'
        MAVEN_SETTINGS_FILE_ID = 'my-maven-settings' // Managed settings.xml ID
    }

    stages {
        stage('Git Clone') {
            steps {
                git url: 'https://github.com/manikiran7/jenkins.git', branch: 'main'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def mvnHome = tool 'MVN_HOME'
                    withSonarQubeEnv("${SONARQUBE_SERVER}") {
                        configFileProvider([configFile(fileId: "${MAVEN_SETTINGS_FILE_ID}", variable: 'MAVEN_SETTINGS')]) {
                            sh "${mvnHome}/bin/mvn -s $MAVEN_SETTINGS clean verify sonar:sonar"
                        }
                    }
                }
            }
        }

        stage('Maven Compile') {
            steps {
                script {
                    def mvnHome = tool 'MVN_HOME'
                    configFileProvider([configFile(fileId: "${MAVEN_SETTINGS_FILE_ID}", variable: 'MAVEN_SETTINGS')]) {
                        sh "${mvnHome}/bin/mvn -s $MAVEN_SETTINGS clean package"
                    }
                }
            }
        }

        stage('Nexus Upload') {
            steps {
                script {
                    def mvnHome = tool 'MVN_HOME'
                    withCredentials([usernamePassword(
                        credentialsId: "${NEXUS_CREDENTIALS_ID}",
                        usernameVariable: 'NEXUS_USER',
                        passwordVariable: 'NEXUS_PASS'
                    )]) {
                        configFileProvider([configFile(fileId: "${MAVEN_SETTINGS_FILE_ID}", variable: 'MAVEN_SETTINGS')]) {
                            sh """
                                ${mvnHome}/bin/mvn -s $MAVEN_SETTINGS deploy \
                                -Dnexus.username=$NEXUS_USER \
                                -Dnexus.password=$NEXUS_PASS
                            """
                        }
                    }
                }
            }
        }

        stage('Slack Notification') {
            steps {
                withCredentials([string(credentialsId: "${SLACK_CREDENTIALS_ID}", variable: 'SLACK_TOKEN')]) {
                    slackSend(
                        token: SLACK_TOKEN,
                        channel: "${SLACK_CHANNEL}",
                        color: 'good',
                        message: ":white_check_mark: *Build Successful:* `${env.JOB_NAME}` Build #${env.BUILD_NUMBER}"
                    )
                }
            }
        }

        stage('Deploy to Tomcat') {
            steps {
                script {
                    // Check if WAR file exists before deploying
                    if (fileExists('target/SimpleCustomerApp.war')) {
                        withCredentials([usernamePassword(
                            credentialsId: "${TOMCAT_CREDENTIALS_ID}",
                            usernameVariable: 'TOMCAT_USER',
                            passwordVariable: 'TOMCAT_PASS'
                        )]) {
                            sh """
                                curl -u $TOMCAT_USER:$TOMCAT_PASS -T target/SimpleCustomerApp.war "${TOMCAT_URL}/deploy?path=/SimpleCustomerApp&update=true"
                            """
                        }
                    } else {
                        error "WAR file target/SimpleCustomerApp.war not found. Deployment aborted."
                    }
                }
            }
        }
    }

    post {
        failure {
            withCredentials([string(credentialsId: "${SLACK_CREDENTIALS_ID}", variable: 'SLACK_TOKEN')]) {
                slackSend(
                    token: SLACK_TOKEN,
                    channel: "${SLACK_CHANNEL}",
                    color: 'danger',
                    message: ":x: *Build Failed:* `${env.JOB_NAME}` Build #${env.BUILD_NUMBER}"
                )
            }
        }
    }
}
